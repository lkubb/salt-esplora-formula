{%- set rw = [] -%}
{%- if esplora.electrs.startswith("unix:") -%}
{%-   do rw.append(esplora.electrs[:5]) -%}
{%- endif -%}

# This file is managed by Salt.
# Manual changes might be overwritten.

# It is based on the official example found here:
# https://github.com/Blockstream/electrs/blob/new-index/contrib/electrs.service

[Unit]
Description=Esplora Prerender Server (nojs)
Documentation=https://github.com/Blockstream/esplora/blob/master/README.md

After=network-online.target
Wants=network-online.target

{%- if esplora.service.wants %}
{%-   for wanted in esplora.service.wants %}
Wants={{ wanted }}.service
After={{ wanted }}.service
{%-   endfor %}
{%- endif %}

[Service]
ExecStart={{ "node" | which }} '{{ esplora.lookup.paths.build | path_join("prerender-server", "dist", "server.js") }}'
WorkingDirectory={{ esplora.lookup.paths.build }}

# Pass through configuration as env vars
EnvironmentFile={{ esplora.lookup.config }}

# Process management
####################

Type=simple
Restart=on-failure
TimeoutSec=60
KillMode=process

# Directory creation and permissions
####################################
User={{ esplora.lookup.user }}
Group={{ esplora.lookup.group }}

{%- if rw %}

ReadWritePaths={{ rw | join(' ') }}
{%- endif %}

# Hardening measures
####################

# Provide a private /tmp and /var/tmp.
PrivateTmp=true

# Mount everything but /dev/, /proc/ and /sys/ read-only for the process.
ProtectSystem=strict

# Deny access to /home, /root and /run/user
ProtectHome=true

# Disallow the process and all of its children to gain
# new privileges through execve().
NoNewPrivileges=true

# Use a new /dev namespace only populated with API pseudo devices
# such as /dev/null, /dev/zero and /dev/random.
PrivateDevices=true

# nodejs applications apparently rely on memory write execute
MemoryDenyWriteExecute=false

# Make /proc/sys/, /sys/, /proc/sysrq-trigger, /proc/latency_stats, /proc/acpi,
# /proc/timer_stats, /proc/fs and /proc/irq read-only.
ProtectKernelTunables=true

# Deny explicit kernel module loading.
ProtectKernelModules=true

# Deny access to the kernel log ring buffer.
ProtectKernelLogs=true

# Deny writes to the hardware clock or system clock.
ProtectClock=true

# Hide processes owned by other users from /proc/.
ProtectProc=invisible

# Hide all files and directories not directly associated with process management
# and introspection in the /proc/ file system configured for the unit's processes.
ProcSubset=pid

# Deny write access to cgroups hierarchies accessible through /sys/fs/cgroup/.
ProtectControlGroups=true

# Restrict the set of accessible socket address families to those listed.
RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6

# Deny access to any kind of namespacing.
RestrictNamespaces=true

# Deny changing the kernel execution domain.
LockPersonality=true

# This can be used to deny access to specific IP addresses.
# `any` blocks all.
IPAddressDeny=any
{%- if not esplora.electrs.startswith("unix:") %}

IPAddressAllow={{ esplora.electrs.split(":") | first }}
{%- endif %}


# Set up up a new user namespace for the executed processes and
# configure a minimal user and group mapping.
PrivateUsers=true

# Deny setting suid/sgid bits.
RestrictSUIDSGID=true

# Remove all System V and POSIX IPC objects owned by user/group on stop.
RemoveIPC=true

# Deny any attempts to enable realtime scheduling. (prevent DoS)
RestrictRealtime=true

# Set up a new UTS namespace and prevent changing hostname/domainname.
ProtectHostname=true

# Empty capability bounding set.
CapabilityBoundingSet=

# Allow system calls used by common system services.
SystemCallFilter=@system-service @pkey
# Explicitly deny system calls listed in the docker seccomp blacklist,
# except for "clone", which is a core requirement for systemd services.
SystemCallFilter=~add_key kcmp keyctl mbind move_pages name_to_handle_at personality process_vm_readv process_vm_writev request_key set_mempolicy setns unshare userfaultfd

# Only permit native system calls.
SystemCallArchitectures=native

[Install]
WantedBy=multi-user.target
